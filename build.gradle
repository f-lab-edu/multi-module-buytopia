plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2' apply false
	id 'io.spring.dependency-management' version '1.1.6' apply false
}

subprojects {
	group = 'com.zeroskill'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
		}
	}

	dependencies {
		// Spring Data JPA: 데이터 영속성을 위한 기본 설정 및 의존성
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		// Log4j2: 애플리케이션 로깅을 위한 설정 및 의존성
		implementation 'org.springframework.boot:spring-boot-starter-log4j2'
		// QueryDSL: 타입 안전한 SQL 쿼리를 작성하기 위한 설정 및 의존성
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

		implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

		// Lombok: 보일러플레이트 코드를 줄이기 위한 도구 및 의존성
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// QueryDSL Annotation Processor: Q 클래스 파일 생성을 위한 애노테이션 프로세서
		annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"

		// Jakarta Annotations & Persistence API: 애노테이션 및 퍼시스턴스 API
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		// MySQL Connector: MySQL 데이터베이스 연결을 위한 드라이버
		runtimeOnly 'com.mysql:mysql-connector-j'

		// Spring Boot Test Starter: 테스트를 위한 기본 설정 및 의존성
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}

	test {
		useJUnitPlatform()
	}

	configurations {
		all*.exclude module: 'spring-boot-starter-logging'
	}

	tasks.register("prepareKotlinBuildScriptModel"){}
}